package flipkart.platform.hydra.common;

import flipkart.platform.hydra.job.Job;

/**
 * A {@link flipkart.platform.hydra.job.Job} execution life cycle has following states:
 * BEGIN (create Job) ----> EXECUTE ----> SEND RESPONSE ----> SUCCESS
 * .............................|                               |
 * .............................----> FAILED ----> END <--------
 * <p/>
 * {@link JobExecutionContext} defines an interface to define and handle state changes in job execution life cycle.
 * The class will be implemented by {@link flipkart.platform.hydra.node.Node} to customize the actions that needs to be
 * taken on each state changes. For example, on job failure, node may decide to retry the job. {@link
 * flipkart.platform.hydra.common.AbstractJobExecutionContext} takes care of such a use case.
 * <p/>
 * <p/>
 *
 * @param <I>
 *     Input Type accepted by the {@link flipkart.platform.hydra.job.Job}
 * @param <O>
 *     Output Type as generated after the execution of the {@link flipkart.platform.hydra.job.Job}
 * @param <J>
 *     {@link flipkart.platform.hydra.job.Job} Type
 *     <p/>
 * @see flipkart.platform.hydra.common.AbstractJobExecutionContext
 */

public interface JobExecutionContext<I, O, J extends Job<I>>
{
    public interface Factory<I, O, J extends Job<I>>
    {
        JobExecutionContext<I, O, J> newJobExecutionContext();
    }

    /**
     * Mark the end of the job execution.
     */
    void end();

    /**
     * Forward the output generated from the job to the container owning the job.
     *
     * @param o
     *     output generated by the job that needs to be processed
     */
    void submitResponse(O o);

    /**
     * Mark the message as successfully processed by the provided job instance.
     *
     * @param messageCtx
     *     message that was processed successfully
     */
    void succeeded(MessageCtx<I> messageCtx);

    /**
     * Notify message process failure. Depending on the implementation, optionally retry.
     *
     * @param messageCtx
     *     message that failed to be processed
     * @param t
     *     Exception that caused the failure
     */
    void failed(MessageCtx<I> messageCtx, Throwable t);

    /**
     * @return the {@link Job} reference held by this context
     */
    J getJob();
}
